Tree

sealed trait Tree[+A]

final case class Leaf[A](value: A) extends Tree[A]
final case class Branch[A](left: Tree[A], right: Tree[A]) extends Tree[A]

object Tree {

  def size[A](root: Tree[A]): Int = root match {
    case Leaf(_) => 1
    case Branch(l, r) => size(l) + size(r)
  }

  def maximum(root: Tree[Int]): Int = root match {
    case Leaf(a) => a
    case Branch(l, r) => maximum(l) max maximum(r)
  }

  def depth[A](root: Tree[A]): Int = root match {
    case Leaf(_) => 1
    case Branch(l, r) => (depth(l) max depth(r)) + 1
  }

  def map[A,B](root: Tree[A])(f: A => B): Tree[B] = root match {
    case Leaf(a) => Leaf(f(a))
    case Branch(l, r) => Branch(map(l)(f), map(r)(f))
  }

  def fold[A, B](root: Tree[A], fl: A => B)(f: (B, B) => B): B = root match {
    case Leaf(a) => fl(a)
    case Branch(l, r) => f(fold(l, fl)(f), fold(r, fl)(f))
  }


}


